[project]
name = "drtsans"
description = "Data Reduction Toolkit SANS reduction"
dynamic = ["version"]
# author = TODO
# keywords = TODO
readme = "README.rst"
requires-python = ">=3.8"
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Natural Language :: English",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "License :: OSI Approved :: Apache Software License",
]
dependencies = [
    "docutils",
    "ipywidgets",
    "jsonschema>=3.0.2",
    "lmfit",
    # mantid is not here b/c it doesn't exist in pypi
    "matplotlib",       # is this necessary
    "mpld3",
    "numexpr",
    "pandas",
    "sortedcontainers",
    "tinydb",
]

license = { file = "LICENSE" }

[project.urls]
Documentation = "https://drtsans.readthedocs.io/"
Source = "https://github.com/neutrons/drtsans/"
BugTracker = "https://github.com/neutrons/drtsans/issues"

[project.scripts]
grasp_cg2 = "drtsans.mono.gpsans.export_to_grasp:main"

####################
### Build config ###
####################

[build-system]
build-backend = "hatchling.build"
requires = ["hatchling", "versioningit"]

[tool.hatch.version]
source = "versioningit"

[tool.hatch.build]
artifacts = ["*.yml", "*.yaml", "*.ini", "*.gx", "*.json", "*.ui"]

[tool.hatch.build.hooks.versioningit-onbuild]
source-file = "src/drtsans/_version.py"
build-file = "drtsans/_version.py"
replacement = '"{next_version}"'

[tool.hatch.build.targets.wheel]
packages = ["src/drtsans"]

[tool.versioningit.vcs]
method = "git"
default-tag = "0.1.0"

[tool.versioningit.next-version]
method = "minor"

[tool.versioningit.format]
distance = "{next_version}.dev{distance}"
dirty = "{version}+d{build_date:%Y%m%d}"
distance-dirty = "{next_version}.dev{distance}+d{build_date:%Y%m%d%H%M}"

[tool.versioningit.write]
file = "src/drtsans/_version.py"

###################
### Pixi config ###
###################

[tool.pixi.workspace]
name = "drtsans"
platforms = ["linux-64"]
channels = [
    "conda-forge",
    "neutrons",
    "oncat",
    "mantid-ornl",
    "mantid",
    "https://prefix.dev/pixi-build-backends",
]
# Required until the build feature becomes stable
preview = ["pixi-build"]

[tool.pixi.package]
name = "drtsans"
version = "0.0.0"

[tool.pixi.package.build]
backend = { name = "pixi-build-python", version = "0.1.*" }

[tool.pixi.package.host-dependencies]
hatchling = "*"
versioningit = "*"

[tool.pixi.dependencies]
lmfit = "*"
h5py = "*"
mantid = ">=6.12.0"
pyqt = ">=5,<6"
qtpy = ">=2.4.3"

[tool.pixi.pypi-dependencies]
drtsans = { path = ".", editable = true }
toml-cli = "*"

# Environments and features

[tool.pixi.environments]
default = { features = [
    "dev",
    "docs",
    "test",
    "build",
], solve-group = "default" }
docs = { features = ["dev", "docs"], no-default-feature = true }
build = { features = ["build"], no-default-feature = true }

[tool.pixi.feature.build.dependencies]
anaconda-client = ">=1.13.0"
check-wheel-contents = ">=0.6.2"
versioningit = ">=3.2.0"

[tool.pixi.feature.build.pypi-dependencies]
toml-cli = "*"

[tool.pixi.feature.dev.dependencies]
pip = ">=25.1.1"
pip-audit = ">=2.9.0"
pre-commit = ">=4.2.0"
ruff = "*"
versioningit = ">=3.2.0"

[tool.pixi.feature.docs.dependencies]
sphinx = ">=8"
sphinx_rtd_theme = ">=3.0.1"

[tool.pixi.feature.docs.pypi-dependencies]
sphinx-qt-documentation = "*"

[tool.pixi.feature.test.dependencies]
codecov = ">=2.1.13"
pytest = ">=8.4.1"
pytest-qt = ">=4.4.0"
pytest-cov = ">=6.2.1"
pytest-mock = ">=3.14.1"
pytest-xvfb = ">=3.1.1"

[tool.pixi.tasks]
# Documentation
build-docs = { cmd = 'sphinx-build -b html docs docs/_build/html', description = "Build documentation" }
test-docs = { cmd = "sphinx-build -M doctest docs docs/_build/html", description = "Test building the documentation" }
# Testing
test = { description = "Run the test suite", cmd = "pytest -m 'not mount_eqsans'" }
# Packaging
conda-build-command = { cmd = "pixi build", description = "Wrapper for building the conda package - used by `conda-build`" }
conda-build = { description = "Build the conda package", depends-on = [
    "sync-version",
    "conda-build-command",
    "reset-version",
] }
conda-publish = { cmd = "anaconda upload *.conda", description = "Publish the .conda package to anaconda.org", depends-on = [
    "conda-build",
] }
# Misc
audit-deps = { cmd = "pip-audit --local -s osv", description = "Audit the package dependencies for vulnerabilities" }
clean = { cmd = 'rm -rf .pytest_cache .ruff_cache **/*.egg-info **/dist **/__pycache__ **/_version.py', description = "Clean up various caches and build artifacts" }
clean-conda = { cmd = "rm -f *.conda", description = "Clean the local .conda build artifacts" }
clean-docs = { cmd = "rm -rf docs/_build", description = "Clean up documentation build artifacts" }
clean-all = { description = "Clean all artifacts", depends-on = [
    "clean",
    "clean-conda",
    "clean-docs",
] }
sync-version = { cmd = 'version=$(python -m versioningit); toml set tool.pixi.package.version "$version" --toml-path pyproject.toml', description = "Sync pyproject.toml version with Git version" }
reset-version = { cmd = "toml set tool.pixi.package.version \"0.0.0\" --toml-path pyproject.toml", description = "Reset the package version to 0.0.0" }


##########################
###      Pytest        ###
##########################

[tool.pytest.ini_options]
pythonpath = [".", "src", "scripts"]
testpaths = ["tests"]
python_files = ["test*.py"]
norecursedirs = [
    ".git",
    "tmp*",
    "_tmp*",
    "__pycache__",
    "*dataset*",
    "*data_set*",
]
markers = [
    "long_execution_time: mark test as having a long execution time",
    "requires_large_memory: mark test as requiring a large amount of RAM memory",
    "datarepo: mark a test as using drtsans-data repository",
    "mount_eqsans: mark a test as using /SNS/EQSANS/shared/sans-backend/data/ data mount",
]

############
### Ruff ###
############

[tool.ruff]
cache-dir = "/tmp/ruff_cache"
line-length = 119
extend-exclude = ["notebooks", "tests/examples"]

[tool.ruff.lint]
# https://beta.ruff.rs/docs/rules/
# suggestions: BLE blind exceptions, I sorts imports
# Full pylint PL = PLC, PLE, PLR (~500 issues), PLW. Enable most
select = ["A", "ARG", "E", "F", "PLC", "PLE", "PLW"]
ignore = [
    "A002",
    "A003",   # shadowing python built-ins
    "ARG001",
    "ARG002", # unused argument
    "E402",   # import not at the top of the file
    "E712",   # comparison to false
    "E741",   # ambiguous variable name
]

