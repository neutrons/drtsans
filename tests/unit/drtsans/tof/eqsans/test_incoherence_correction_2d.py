# Test drtsans.tof.eqsans.incoherence_correction_2d
import pytest

import numpy as np
from numpy.testing import assert_allclose

import drtsans.tof.eqsans.incoherence_correction_2d as ic2d
from drtsans.dataobjects import IQazimuthal


def generate_test_data():
    # Generate test data

    # original data can be recreated by performing
    # i_of_q.intensity.reshape((11, 11, 5))
    intensity_vec = np.array(
        [
            0.1,
            np.nan,
            np.nan,
            np.nan,
            np.nan,
            0.1,
            np.nan,
            np.nan,
            np.nan,
            np.nan,
            0.1,
            np.nan,
            np.nan,
            np.nan,
            np.nan,
            0.1,
            np.nan,
            np.nan,
            np.nan,
            np.nan,
            0.1,
            0.13,
            np.nan,
            np.nan,
            np.nan,
            0.1,
            0.13,
            np.nan,
            np.nan,
            np.nan,
            0.1,
            0.13,
            np.nan,
            np.nan,
            np.nan,
            0.1,
            np.nan,
            np.nan,
            np.nan,
            np.nan,
            0.1,
            np.nan,
            np.nan,
            np.nan,
            np.nan,
            0.1,
            np.nan,
            np.nan,
            np.nan,
            np.nan,
            0.1,
            np.nan,
            np.nan,
            np.nan,
            np.nan,
            0.1,
            np.nan,
            np.nan,
            np.nan,
            np.nan,
            0.1,
            0.13,
            0.15,
            np.nan,
            np.nan,
            0.1,
            0.13,
            0.15,
            np.nan,
            np.nan,
            0.1,
            0.13,
            0.15,
            np.nan,
            np.nan,
            0.1,
            0.13,
            0.15,
            0.14,
            np.nan,
            0.1,
            0.13,
            0.15,
            0.14,
            np.nan,
            0.1,
            0.13,
            0.15,
            0.14,
            np.nan,
            0.1,
            0.13,
            0.15,
            np.nan,
            np.nan,
            0.1,
            0.13,
            0.15,
            np.nan,
            np.nan,
            0.1,
            0.13,
            0.15,
            np.nan,
            np.nan,
            0.1,
            np.nan,
            np.nan,
            np.nan,
            np.nan,
            0.1,
            np.nan,
            np.nan,
            np.nan,
            np.nan,
            0.1,
            0.13,
            0.15,
            np.nan,
            np.nan,
            0.1,
            0.13,
            0.15,
            0.14,
            0.11,
            0.1,
            0.13,
            0.15,
            0.14,
            0.11,
            0.1,
            0.13,
            0.15,
            0.14,
            0.11,
            0.1,
            0.13,
            0.15,
            0.14,
            0.11,
            0.1,
            0.13,
            0.15,
            0.14,
            0.11,
            0.1,
            0.13,
            0.15,
            0.14,
            0.11,
            0.1,
            0.13,
            0.15,
            0.14,
            0.11,
            0.1,
            0.13,
            0.15,
            np.nan,
            np.nan,
            0.1,
            np.nan,
            np.nan,
            np.nan,
            np.nan,
            0.1,
            np.nan,
            np.nan,
            np.nan,
            np.nan,
            0.1,
            0.13,
            0.15,
            np.nan,
            np.nan,
            0.1,
            0.13,
            0.15,
            0.14,
            0.11,
            np.nan,
            0.13,
            0.15,
            0.14,
            0.11,
            np.nan,
            0.13,
            0.15,
            0.14,
            0.11,
            np.nan,
            0.13,
            0.15,
            0.14,
            0.11,
            np.nan,
            0.13,
            0.15,
            0.14,
            0.11,
            np.nan,
            0.13,
            0.15,
            0.14,
            0.11,
            0.1,
            0.13,
            0.15,
            0.14,
            0.11,
            0.1,
            0.13,
            0.15,
            np.nan,
            np.nan,
            0.1,
            np.nan,
            np.nan,
            np.nan,
            np.nan,
            0.1,
            0.13,
            np.nan,
            np.nan,
            np.nan,
            0.1,
            0.13,
            0.15,
            0.14,
            np.nan,
            0.1,
            0.13,
            0.15,
            0.14,
            0.11,
            np.nan,
            0.13,
            0.15,
            0.14,
            0.11,
            np.nan,
            np.nan,
            np.nan,
            0.14,
            0.11,
            np.nan,
            np.nan,
            np.nan,
            0.14,
            0.11,
            np.nan,
            np.nan,
            np.nan,
            0.14,
            0.11,
            np.nan,
            0.13,
            0.15,
            0.14,
            0.11,
            0.1,
            0.13,
            0.15,
            0.14,
            0.11,
            0.1,
            0.13,
            0.15,
            0.14,
            np.nan,
            0.1,
            0.13,
            np.nan,
            np.nan,
            np.nan,
            0.1,
            0.13,
            np.nan,
            np.nan,
            np.nan,
            0.1,
            0.13,
            0.15,
            0.14,
            np.nan,
            0.1,
            0.13,
            0.15,
            0.14,
            0.11,
            np.nan,
            0.13,
            0.15,
            0.14,
            0.11,
            np.nan,
            np.nan,
            np.nan,
            0.14,
            0.11,
            np.nan,
            np.nan,
            np.nan,
            np.nan,
            np.nan,
            np.nan,
            np.nan,
            np.nan,
            0.14,
            0.11,
            np.nan,
            0.13,
            0.15,
            0.14,
            0.11,
            0.1,
            0.13,
            0.15,
            0.14,
            0.11,
            0.1,
            0.13,
            0.15,
            0.14,
            np.nan,
            0.1,
            0.13,
            np.nan,
            np.nan,
            np.nan,
            0.1,
            0.13,
            np.nan,
            np.nan,
            np.nan,
            0.1,
            0.13,
            0.15,
            0.14,
            np.nan,
            0.1,
            0.13,
            0.15,
            0.14,
            0.11,
            np.nan,
            0.13,
            0.15,
            0.14,
            0.11,
            np.nan,
            np.nan,
            np.nan,
            0.14,
            0.11,
            np.nan,
            np.nan,
            np.nan,
            0.14,
            0.11,
            np.nan,
            np.nan,
            np.nan,
            0.14,
            0.11,
            np.nan,
            0.13,
            0.15,
            0.14,
            0.11,
            0.1,
            0.13,
            0.15,
            0.14,
            0.11,
            0.1,
            0.13,
            0.15,
            0.14,
            np.nan,
            0.1,
            0.13,
            np.nan,
            np.nan,
            np.nan,
            0.1,
            np.nan,
            np.nan,
            np.nan,
            np.nan,
            0.1,
            0.13,
            0.15,
            np.nan,
            np.nan,
            0.1,
            0.13,
            0.15,
            0.14,
            0.11,
            np.nan,
            0.13,
            0.15,
            0.14,
            0.11,
            np.nan,
            0.13,
            0.15,
            0.14,
            0.11,
            np.nan,
            0.13,
            0.15,
            0.14,
            0.11,
            np.nan,
            0.13,
            0.15,
            0.14,
            0.11,
            np.nan,
            0.13,
            0.15,
            0.14,
            0.11,
            0.1,
            0.13,
            0.15,
            0.14,
            0.11,
            0.1,
            0.13,
            0.15,
            np.nan,
            np.nan,
            0.1,
            np.nan,
            np.nan,
            np.nan,
            np.nan,
            0.1,
            np.nan,
            np.nan,
            np.nan,
            np.nan,
            0.1,
            0.13,
            0.15,
            np.nan,
            np.nan,
            0.1,
            0.13,
            0.15,
            0.14,
            0.11,
            0.1,
            0.13,
            0.15,
            0.14,
            0.11,
            0.1,
            0.13,
            0.15,
            0.14,
            0.11,
            0.1,
            0.13,
            0.15,
            0.14,
            0.11,
            0.1,
            0.13,
            0.15,
            0.14,
            0.11,
            0.1,
            0.13,
            0.15,
            0.14,
            0.11,
            0.1,
            0.13,
            0.15,
            0.14,
            0.11,
            0.1,
            0.13,
            0.15,
            np.nan,
            np.nan,
            0.1,
            np.nan,
            np.nan,
            np.nan,
            np.nan,
            0.1,
            np.nan,
            np.nan,
            np.nan,
            np.nan,
            0.1,
            0.13,
            0.15,
            np.nan,
            np.nan,
            0.1,
            0.13,
            0.15,
            np.nan,
            np.nan,
            0.1,
            0.13,
            0.15,
            np.nan,
            np.nan,
            0.1,
            0.13,
            0.15,
            0.14,
            np.nan,
            0.1,
            0.13,
            0.15,
            0.14,
            np.nan,
            0.1,
            0.13,
            0.15,
            0.14,
            np.nan,
            0.1,
            0.13,
            0.15,
            np.nan,
            np.nan,
            0.1,
            0.13,
            0.15,
            np.nan,
            np.nan,
            0.1,
            0.13,
            0.15,
            np.nan,
            np.nan,
            0.1,
            np.nan,
            np.nan,
            np.nan,
            np.nan,
            0.1,
            np.nan,
            np.nan,
            np.nan,
            np.nan,
            0.1,
            np.nan,
            np.nan,
            np.nan,
            np.nan,
            0.1,
            np.nan,
            np.nan,
            np.nan,
            np.nan,
            0.1,
            np.nan,
            np.nan,
            np.nan,
            np.nan,
            0.1,
            0.13,
            np.nan,
            np.nan,
            np.nan,
            0.1,
            0.13,
            np.nan,
            np.nan,
            np.nan,
            0.1,
            0.13,
            np.nan,
            np.nan,
            np.nan,
            0.1,
            np.nan,
            np.nan,
            np.nan,
            np.nan,
            0.1,
            np.nan,
            np.nan,
            np.nan,
            np.nan,
            0.1,
            np.nan,
            np.nan,
            np.nan,
            np.nan,
            0.1,
            np.nan,
            np.nan,
            np.nan,
            np.nan,
        ]
    )

    error_vec = np.sqrt(intensity_vec)

    vec_qx = np.arange(-0.1, 0.12, 0.02).repeat(55)
    vec_qy = np.tile(np.arange(-0.1, 0.12, 0.02).repeat(5), 11)

    wavelength_vec = np.tile(np.arange(1, 6, 1), 121)

    i_of_q = IQazimuthal(
        intensity=intensity_vec,
        error=error_vec,
        qx=vec_qx,
        qy=vec_qy,
        wavelength=wavelength_vec,
    )

    b_array = np.array([[0.0, 0.03, 0.05, 0.04, 0.01], [0.0, 0.001, 0.001, 0.001, 0.001]])

    # the correction will scale all intensities to 0.1 (the intensity of the first wavelength)
    expected_intensity_vec = np.copy(intensity_vec)
    finite_mask = ~np.isnan(expected_intensity_vec)
    expected_intensity_vec[finite_mask] = 0.1

    # the errors depend on the wavelength-dependent b factor value and whether the bin
    # was inside or outside the q subset for valid intensity at all wavelengths
    expected_error_vec = np.copy(error_vec)
    error_q_subset_wl = [0.0, 0.3452067, 0.37081127, 0.35823782, 0.31754422]
    error_non_q_subset_wl = [0.0, 0.36055651, 0.38729963, 0.37416707, 0.33166399]
    # massage the errors into the right shape for comparison with the IQazimuthal data structure
    q_subset_mask = ic2d.gen_q_subset_mask(i_of_q, 11, 11, 5)
    num_wl = np.unique(i_of_q.wavelength).shape[0]
    for i_wl in range(1, num_wl):  # skip reference wavelength = 0
        error_wl = expected_error_vec[i_wl::num_wl]
        finite_mask = ~np.isnan(error_wl)
        error_wl[q_subset_mask & finite_mask] = error_q_subset_wl[i_wl]
        error_wl[~q_subset_mask & finite_mask] = error_non_q_subset_wl[i_wl]

    return i_of_q, b_array, expected_intensity_vec, expected_error_vec


def test_reshape_q_azimuthal():
    # IQazimuthal does not require specific ordering; however,
    # calculations performed assume a specific ordering
    i_of_q, *_ = generate_test_data()
    # create some random order that will be de-randomed
    r_order = np.arange(i_of_q.intensity.shape[0])
    np.random.shuffle(r_order)
    r_i_of_q = IQazimuthal(
        intensity=i_of_q.intensity[r_order],
        error=i_of_q.error[r_order],
        qx=i_of_q.qx[r_order],
        qy=i_of_q.qy[r_order],
        wavelength=i_of_q.wavelength[r_order],
    )
    test_i_of_q = ic2d.reshape_q_azimuthal(r_i_of_q)
    i_drop_nan = i_of_q.intensity[np.isfinite(i_of_q.intensity)]
    test_i_drop_nan = test_i_of_q.intensity[np.isfinite(test_i_of_q.intensity)]
    assert np.array_equal(i_drop_nan, test_i_drop_nan)
    assert np.array_equal(i_of_q.qx, test_i_of_q.qx)
    assert np.array_equal(i_of_q.qy, test_i_of_q.qy)
    assert np.array_equal(i_of_q.wavelength, test_i_of_q.wavelength)


def test_gen_q_subset_mask():
    # q_subset of 2d case is each qx, qy where all lambda(qx, qy) is finite
    # in original test data, this can be represented as the ndarray ranges
    # 2:-2, 2, :
    # 2:-2, 8, :
    # 2, 2:-2, :
    # 8, 2:-2, :
    i_of_q, *_ = generate_test_data()
    qx_len = np.unique(i_of_q.qx).shape[0]
    qy_len = np.unique(i_of_q.qy).shape[0]
    wavelength_len = np.unique(i_of_q.wavelength).shape[0]
    q_subset_mask = ic2d.gen_q_subset_mask(i_of_q, qx_len, qy_len, wavelength_len)
    # return mask to test data arrangement for testing
    test_q_subset_mask = q_subset_mask.repeat(wavelength_len).reshape((11, 11, 5))
    # Positive assertions
    assert test_q_subset_mask[2:-2, 2, :].all()
    assert test_q_subset_mask[2:-2, 8, :].all()
    assert test_q_subset_mask[2, 2:-2, :].all()
    assert test_q_subset_mask[8, 2:-2, :].all()
    # Negative assertions
    assert not test_q_subset_mask[:2, :, :].any()
    assert not test_q_subset_mask[-2:, :, :].any()
    assert not test_q_subset_mask[:, :2, :].any()
    assert not test_q_subset_mask[:, -2:, :].any()
    assert not test_q_subset_mask[3:8, 3:8, :].any()
    # Test filtering
    q_subset_filter = q_subset_mask.repeat(wavelength_len)
    assert np.all(np.isfinite(i_of_q.intensity[q_subset_filter]))
    assert np.any(np.isnan(i_of_q.intensity[~q_subset_filter]))


def test_correct_incoherence_inelastic_2d():
    """test of the function correct_incoherence_inelastic_2d"""
    i_of_q, b_array, expected_intensity_vec, expected_error_vec = generate_test_data()

    corrected_i_of_q = ic2d.correct_incoherence_inelastic_2d(i_of_q, b_array, ref_wl_index=0)

    assert isinstance(corrected_i_of_q, ic2d.CorrectedIQ2D)
    assert_allclose(corrected_i_of_q.iq2d.intensity, expected_intensity_vec)
    assert_allclose(corrected_i_of_q.iq2d.error, expected_error_vec)

    # test that the reference wavelength (every num_wl element) is unchanged
    num_wl = np.unique(i_of_q.wavelength).shape[0]
    assert_allclose(corrected_i_of_q.iq2d.intensity[0::num_wl], i_of_q.intensity[0::num_wl])
    assert_allclose(corrected_i_of_q.iq2d.error[0::num_wl], i_of_q.error[0::num_wl])


if __name__ == "__main__":
    pytest.main([__file__])
