variables:
  CONTAINER_URL: "$HARBOR_HOST/$HARBOR_PROJECT/$CI_COMMIT_REF_SLUG"
  MINICONDA_CONTAINER: "savannah.ornl.gov/rse/miniconda3:22.11.1-20230209.1219"
  GIT_SUBMODULE_STRATEGY: recursive

#####
# YAML anchors Section
# to reuse setup and teardown commands
#####
.startup_cleanup: &startup_cleanup
  - test -d .ruff_cache && ls -lR .ruff_cache && sudo rm -rf .ruff_cache
  - curl https://code.ornl.gov/rse-deployment/rse-sharables/raw/master/rse-bash-modules.sh -O
  - source rse-bash-modules.sh
  - func_rse_docker_cleanup

.teardown_cleanup: &teardown_cleanup
  - source rse-bash-modules.sh
  - func_rse_docker_cleanup
  - sudo chown -R gitlab-runner .

#####
# Job Stages
#####
stages:
  - static-analysis
  - dockerbuild
  - test
  - publish
  # we are not deploying automatically to analysis right now
  # - analysis-update

#####
# Jobs
#####
pre-commit:
  stage: static-analysis
  retry: 1
  cache:
    paths:
      - .ruff_cache
    #  pull .ruff_cache cache from previous pipeline. Do not attempt to delete, modify, or clean up
    policy: pull
  before_script:
    - *startup_cleanup
    - sudo cp scripts/fix_runner_perms.sh /etc/cron.hourly/fix_runner_perms.sh
    - sudo chmod +x /etc/cron.hourly/fix_runner_perms.sh
  script:
    - docker login -u "$HARBOR_USERNAME" -p "$HARBOR_PASSWORD" "$HARBOR_URL"
    - docker pull $MINICONDA_CONTAINER
    - time docker run -v $PWD:/opt/sans-backend -t $MINICONDA_CONTAINER bash -c "conda install -y pre-commit && cd /opt/sans-backend && pre-commit run --all"
  after_script:
    - *teardown_cleanup
    - sudo chown -R gitlab-runner .
  tags:
    - neutrons-multi-builder

dockerbuild:
  stage: dockerbuild
  retry: 1
  cache:
    paths:
      - .ruff_cache
    #  pull .ruff_cache cache from previous pipeline. Do not attempt to delete, modify, or clean up
    policy: pull
  before_script:
    - *startup_cleanup
    - sudo cp scripts/fix_runner_perms.sh /etc/cron.hourly/fix_runner_perms.sh
    - sudo chmod +x /etc/cron.hourly/fix_runner_perms.sh
  script:
    - docker login -u "$HARBOR_USERNAME" -p "$HARBOR_PASSWORD" "$HARBOR_URL"
    # kickstart or $CI_COMMIT_REF_SLUG
    - docker build -f dockerfiles/Dockerfile.kickstart --build-arg PROFILE=${PROFILE} -t $CONTAINER_URL .
    - docker push $CONTAINER_URL
  after_script:
    - *teardown_cleanup
  tags:
    - neutrons-multi-builder

create-wheel:
  stage: test
  cache:
    paths:
      - .ruff_cache
    #  pull .ruff_cache cache from previous pipeline. Do not attempt to delete, modify, or clean up
    policy: pull
  dependencies:
    - dockerbuild
  before_script:
    - *startup_cleanup
  script:
    - set -x
    - sudo rm -rf /tmp/sans-backend || true
    - sudo mkdir -p /tmp/sans-backend
    - sudo cp -r . /tmp/sans-backend
    - sudo chmod 777 /tmp/sans-backend
    - pushd /tmp/sans-backend
    - docker login -u "$HARBOR_USERNAME" -p "$HARBOR_PASSWORD" "$HARBOR_URL"
    - time docker pull $CONTAINER_URL
    - time docker run -v $PWD:/opt/sans-backend -t $CONTAINER_URL bash -c "bash /opt/sans-backend/scripts/create_wheel.sh"
    - popd
  after_script:
    - ls -l $CI_PROJECT_DIR
    - *teardown_cleanup
  tags:
    - neutrons-multi-builder

code-unit-test:
  stage: test
  retry: 1
  cache:
    paths:
      - .ruff_cache
    #  pull .ruff_cache cache from previous pipeline. Do not attempt to delete, modify, or clean up
    policy: pull
  dependencies:
    - dockerbuild
  before_script:
    - *startup_cleanup
    - sudo mkdir -p /SNS/EQSANS/shared/sans-backend/ || true
  script:
    - sudo rm -rf /tmp/sans-backend || true
    - sudo mkdir -p /tmp/sans-backend
    - sudo cp -r . /tmp/sans-backend
    - sudo chmod 777 /tmp/sans-backend
    - pushd /tmp/sans-backend
    - docker login -u "$HARBOR_USERNAME" -p "$HARBOR_PASSWORD" "$HARBOR_URL"
    - time docker pull $CONTAINER_URL
    - COMMAND="cd /opt/sans-backend/tests/data/drtsans-data/ && git lfs install && git lfs pull && cd /opt/sans-backend && python -m pip install -e . && bash /opt/sans-backend/test_job.sh -m 'not mount_eqsans' -s unit"
    # use bash -i to run .bashrc and activate the conda environment
    - time docker run -v $PWD:/opt/sans-backend -t $CONTAINER_URL bash -i -c "$COMMAND"
    - popd
  after_script:
    - cp -r /tmp/sans-backend/unit_test_results.xml unit_test_results.xml
    - cp -r /tmp/sans-backend/unit_test_coverage.xml unit_test_coverage.xml
    - *teardown_cleanup
  artifacts:
    paths:
      -  unit_test_results.xml
      -  unit_test_coverage.xml
    reports:
      junit: unit_test_results.xml
  coverage: /TOTAL.*? (100(?:\.0+)?\%|[1-9]?\d(?:\.\d+)?\%)$/
  tags:
    - drtsans_lfs

code-integration-test:
  stage: test
  retry: 1
  cache:
    paths:
      - .ruff_cache
    #  pull .ruff_cache cache from previous pipeline. Do not attempt to delete, modify, or clean up
    policy: pull
  dependencies:
    - dockerbuild
  before_script:
    - *startup_cleanup
    - sudo mkdir -p /SNS/EQSANS/shared/sans-backend/ || true
  script:
    - sudo rm -rf /tmp/sans-backend || true
    - sudo mkdir -p /tmp/sans-backend
    - sudo cp -r . /tmp/sans-backend
    - sudo chmod 777 /tmp/sans-backend
    - pushd /tmp/sans-backend
    - docker login -u "$HARBOR_USERNAME" -p "$HARBOR_PASSWORD" "$HARBOR_URL"
    - time docker pull $CONTAINER_URL
    - COMMAND="cd /opt/sans-backend/tests/data/drtsans-data/ && git lfs install && git lfs pull && cd /opt/sans-backend && python -m pip install -e . && bash /opt/sans-backend/test_job.sh -m 'not mount_eqsans' -s integration"
    # use bash -i to run .bashrc and activate the conda environment
    - time docker run -v $PWD:/opt/sans-backend -t $CONTAINER_URL bash -i -c "$COMMAND"
    - popd
  after_script:
    - cp -r /tmp/sans-backend/integration_test_results.xml integration_test_results.xml
    - cp -r /tmp/sans-backend/integration_test_coverage.xml integration_test_coverage.xml
    - *teardown_cleanup
  artifacts:
    paths:
      -  integration_test_results.xml
      -  integration_test_coverage.xml
    reports:
      junit: integration_test_results.xml
  coverage: /TOTAL.*? (100(?:\.0+)?\%|[1-9]?\d(?:\.\d+)?\%)$/
  tags:
    - drtsans_lfs

docs-feature:
  stage: test
  retry: 1
  cache:
    paths:
      - .ruff_cache
    #  pull .ruff_cache cache from previous pipeline. Do not attempt to delete, modify, or clean up
    policy: pull
  dependencies:
    - dockerbuild
  script:
    - *startup_cleanup
    - set -x
    - sudo rm -rf /tmp/sans-backend || true
    - sudo mkdir -p /tmp/sans-backend
    # test directory may contain large files from data repo submodule
    - sudo rsync -av --exclude='tests' ./ /tmp/sans-backend/
    - sudo chmod 777 /tmp/sans-backend
    - pushd /tmp/sans-backend
    - docker login -u "$HARBOR_USERNAME" -p "$HARBOR_PASSWORD" "$HARBOR_URL"
    - time docker pull $CONTAINER_URL
    # use bash -i to run .bashrc and activate the conda environment
    - time docker run -u 0:0 -v $PWD:/opt/sans-backend -t $CONTAINER_URL bash -i -c "cd /opt/sans-backend/ && cp -R /opt/sans-backend /tmp/ && cd /tmp/sans-backend/ && python -m pip install -e . && cd docs && make html"
    - ls .
    - popd
  after_script:
    - ls -l $CI_PROJECT_DIR
    - *teardown_cleanup
  tags:
    - neutrons-multi-builder
  except:
    - next
    - master

conda-package:
  stage: publish
  cache:
    paths:
      - .ruff_cache
    #  pull .ruff_cache cache from previous pipeline. Do not attempt to delete, modify, or clean up
    policy: pull
  dependencies:
    - create-wheel
    - dockerbuild
  script:
    - *startup_cleanup
    - sudo rm -rf /tmp/sans-backend || true
    - sudo mkdir -p /tmp/sans-backend
    - sudo cp -r . /tmp/sans-backend
    - sudo chmod 777 /tmp/sans-backend
    - pushd /tmp/sans-backend
    - docker login -u "$HARBOR_USERNAME" -p "$HARBOR_PASSWORD" "$HARBOR_URL"
    - time docker pull $CONTAINER_URL
    - time docker run -e "CI_COMMIT_REF_SLUG=${CI_COMMIT_REF_SLUG}" -e "CI_COMMIT_TAG=${CI_COMMIT_TAG}" -e "ANACONDA_TOKEN=${ANACONDA_TOKEN}" -v $PWD:/opt/sans-backend -t $CONTAINER_URL bash -c "bash /opt/sans-backend/scripts/publish_package.sh"
  after_script:
    - ls -l $CI_PROJECT_DIR
    - *teardown_cleanup
  tags:
    - drtsans_lfs

# comment out deploy-dev since we are currently not deploying automatically to the analysis cluster
.deploy-dev:
  stage: analysis-update
  inherit:
    # do not pass global variables to the downstream pipeline
    variables: false
  variables:
    # specify deployment in the downstream repo is TEST
    PLAY: update
    CONDA_ENV: sans-dev
  trigger:
    project: sns-hfir-scse/deployments/drtsans-deploy
    # run the downstream pipeline on branch main
    branch: main
  rules:
    # skip deployment for nightly builds (scheduled builds)
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - if: $CI_COMMIT_REF_SLUG == "next"
      when: on_success

# comment out deploy-qa since we are currently not deploying automatically to the analysis cluster
.deploy-qa:
  stage: analysis-update
  inherit:
    # do not pass global variables to the downstream pipeline
    variables: false
  variables:
    # specify deployment in the downstream repo is TEST
    PLAY: update
    CONDA_ENV: sans-qa
  trigger:
    project: sns-hfir-scse/deployments/drtsans-deploy
    # run the downstream pipeline on branch main
    branch: main
  rules:
    # skip deployment for nightly builds (scheduled builds)
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - if: $CI_COMMIT_REF_SLUG == "qa"
      when: on_success

# comment out deploy-prod since we are currently not deploying automatically to the analysis cluster
.deploy-prod:
  stage: analysis-update
  inherit:
    # do not pass global variables to the downstream pipeline
    variables: false
  variables:
    # specify deployment in the downstream repo is TEST
    PLAY: update
    CONDA_ENV: sans
  trigger:
    project: sns-hfir-scse/deployments/drtsans-deploy
    # run the downstream pipeline on branch main
    branch: main
  rules:
    # skip deployment for nightly builds (scheduled builds)
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - if: $CI_COMMIT_REF_SLUG == "main"
      when: on_success
