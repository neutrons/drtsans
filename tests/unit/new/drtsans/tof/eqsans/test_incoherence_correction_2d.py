# Test drtsans.tof.eqsans.incoherence_correction_2d
import pytest
from drtsans.dataobjects import IQazimuthal
import numpy as np


def generate_test_data():
    # Generate test data
    intensity_vec = np.array([
        0.1, np.nan, np.nan, np.nan, np.nan,
        0.1, np.nan, np.nan, np.nan, np.nan,
        0.1, np.nan, np.nan, np.nan, np.nan,
        0.1, np.nan, np.nan, np.nan, np.nan,
        0.1, 0.13, np.nan, np.nan, np.nan,
        0.1, 0.13, np.nan, np.nan, np.nan,
        0.1, 0.13, np.nan, np.nan, np.nan,
        0.1, np.nan, np.nan, np.nan, np.nan,
        0.1, np.nan, np.nan, np.nan, np.nan,
        0.1, np.nan, np.nan, np.nan, np.nan,
        0.1, np.nan, np.nan, np.nan, np.nan,
        0.1, np.nan, np.nan, np.nan, np.nan,
        0.1, 0.13, 0.15, np.nan, np.nan,
        0.1, 0.13, 0.15, np.nan, np.nan,
        0.1, 0.13, 0.15, np.nan, np.nan,
        0.1, 0.13, 0.15, 0.14, np.nan,
        0.1, 0.13, 0.15, 0.14, np.nan,
        0.1, 0.13, 0.15, 0.14, np.nan,
        0.1, 0.13, 0.15, np.nan, np.nan,
        0.1, 0.13, 0.15, np.nan, np.nan,
        0.1, 0.13, 0.15, np.nan, np.nan,
        0.1, np.nan, np.nan, np.nan, np.nan,
        0.1, np.nan, np.nan, np.nan, np.nan,
        0.1, 0.13, 0.15, np.nan, np.nan,
        0.1, 0.13, 0.15, 0.14, 0.11,
        0.1, 0.13, 0.15, 0.14, 0.11,
        0.1, 0.13, 0.15, 0.14, 0.11,
        0.1, 0.13, 0.15, 0.14, 0.11,
        0.1, 0.13, 0.15, 0.14, 0.11,
        0.1, 0.13, 0.15, 0.14, 0.11,
        0.1, 0.13, 0.15, 0.14, 0.11,
        0.1, 0.13, 0.15, np.nan, np.nan,
        0.1, np.nan, np.nan, np.nan, np.nan,
        0.1, np.nan, np.nan, np.nan, np.nan,
        0.1, 0.13, 0.15, np.nan, np.nan,
        0.1, 0.13, 0.15, 0.14, 0.11,
        np.nan, 0.13, 0.15, 0.14, 0.11,
        np.nan, 0.13, 0.15, 0.14, 0.11,
        np.nan, 0.13, 0.15, 0.14, 0.11,
        np.nan, 0.13, 0.15, 0.14, 0.11,
        np.nan, 0.13, 0.15, 0.14, 0.11,
        0.1, 0.13, 0.15, 0.14, 0.11,
        0.1, 0.13, 0.15, np.nan, np.nan,
        0.1, np.nan, np.nan, np.nan, np.nan,
        0.1, 0.13, np.nan, np.nan, np.nan,
        0.1, 0.13, 0.15, 0.14, np.nan,
        0.1, 0.13, 0.15, 0.14, 0.11,
        np.nan, 0.13, 0.15, 0.14, 0.11,
        np.nan, np.nan, np.nan, 0.14, 0.11,
        np.nan, np.nan, np.nan, 0.14, 0.11,
        np.nan, np.nan, np.nan, 0.14, 0.11,
        np.nan, 0.13, 0.15, 0.14, 0.11,
        0.1, 0.13, 0.15, 0.14, 0.11,
        0.1, 0.13, 0.15, 0.14, np.nan,
        0.1, 0.13, np.nan, np.nan, np.nan,
        0.1, 0.13, np.nan, np.nan, np.nan,
        0.1, 0.13, 0.15, 0.14, np.nan,
        0.1, 0.13, 0.15, 0.14, 0.11,
        np.nan, 0.13, 0.15, 0.14, 0.11,
        np.nan, np.nan, np.nan, 0.14, 0.11,
        np.nan, np.nan, np.nan, np.nan, np.nan,
        np.nan, np.nan, np.nan, 0.14, 0.11,
        np.nan, 0.13, 0.15, 0.14, 0.11,
        0.1, 0.13, 0.15, 0.14, 0.11,
        0.1, 0.13, 0.15, 0.14, np.nan,
        0.1, 0.13, np.nan, np.nan, np.nan,
        0.1, 0.13, np.nan, np.nan, np.nan,
        0.1, 0.13, 0.15, 0.14, np.nan,
        0.1, 0.13, 0.15, 0.14, 0.11,
        np.nan, 0.13, 0.15, 0.14, 0.11,
        np.nan, np.nan, np.nan, 0.14, 0.11,
        np.nan, np.nan, np.nan, 0.14, 0.11,
        np.nan, np.nan, np.nan, 0.14, 0.11,
        np.nan, 0.13, 0.15, 0.14, 0.11,
        0.1, 0.13, 0.15, 0.14, 0.11,
        0.1, 0.13, 0.15, 0.14, np.nan,
        0.1, 0.13, np.nan, np.nan, np.nan,
        0.1, np.nan, np.nan, np.nan, np.nan,
        0.1, 0.13, 0.15, np.nan, np.nan,
        0.1, 0.13, 0.15, 0.14, 0.11,
        np.nan, 0.13, 0.15, 0.14, 0.11,
        np.nan, 0.13, 0.15, 0.14, 0.11,
        np.nan, 0.13, 0.15, 0.14, 0.11,
        np.nan, 0.13, 0.15, 0.14, 0.11,
        np.nan, 0.13, 0.15, 0.14, 0.11,
        0.1, 0.13, 0.15, 0.14, 0.11,
        0.1, 0.13, 0.15, np.nan, np.nan,
        0.1, np.nan, np.nan, np.nan, np.nan,
        0.1, np.nan, np.nan, np.nan, np.nan,
        0.1, 0.13, 0.15, np.nan, np.nan,
        0.1, 0.13, 0.15, 0.14, 0.11,
        0.1, 0.13, 0.15, 0.14, 0.11,
        0.1, 0.13, 0.15, 0.14, 0.11,
        0.1, 0.13, 0.15, 0.14, 0.11,
        0.1, 0.13, 0.15, 0.14, 0.11,
        0.1, 0.13, 0.15, 0.14, 0.11,
        0.1, 0.13, 0.15, 0.14, 0.11,
        0.1, 0.13, 0.15, np.nan, np.nan,
        0.1, np.nan, np.nan, np.nan, np.nan,
        0.1, np.nan, np.nan, np.nan, np.nan,
        0.1, 0.13, 0.15, np.nan, np.nan,
        0.1, 0.13, 0.15, np.nan, np.nan,
        0.1, 0.13, 0.15, np.nan, np.nan,
        0.1, 0.13, 0.15, 0.14, np.nan,
        0.1, 0.13, 0.15, 0.14, np.nan,
        0.1, 0.13, 0.15, 0.14, np.nan,
        0.1, 0.13, 0.15, np.nan, np.nan,
        0.1, 0.13, 0.15, np.nan, np.nan,
        0.1, 0.13, 0.15, np.nan, np.nan,
        0.1, np.nan, np.nan, np.nan, np.nan,
        0.1, np.nan, np.nan, np.nan, np.nan,
        0.1, np.nan, np.nan, np.nan, np.nan,
        0.1, np.nan, np.nan, np.nan, np.nan,
        0.1, np.nan, np.nan, np.nan, np.nan,
        0.1, 0.13, np.nan, np.nan, np.nan,
        0.1, 0.13, np.nan, np.nan, np.nan,
        0.1, 0.13, np.nan, np.nan, np.nan,
        0.1, np.nan, np.nan, np.nan, np.nan,
        0.1, np.nan, np.nan, np.nan, np.nan,
        0.1, np.nan, np.nan, np.nan, np.nan,
        0.1, np.nan, np.nan, np.nan, np.nan,
    ])

    error_vec = np.sqrt(intensity_vec)

    vec_qx = np.arange(-0.1, 0.12, 0.02).repeat(55)
    vec_qy = np.tile(np.arange(-0.1, 0.12, 0.02).repeat(5), 11)

    wavelength_vec = np.tile(np.arange(1, 6, 1), 121)

    i_of_q = IQazimuthal(
        intensity=intensity_vec,
        error=error_vec,
        qx=vec_qx,
        qy=vec_qy,
        wavelength=wavelength_vec
    )

    return i_of_q
